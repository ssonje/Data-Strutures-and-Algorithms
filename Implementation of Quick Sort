/*
Implementation of Quick Sort.
*/

#include<iostream>
using namespace std;

int partition(int arr[] , int l , int r)
{
	int pIndex = l;
	int pivot = arr[r];
	
	for(int i=l;i<r;i++)
	{
		if(arr[i]<pivot)
		{
			int temp = arr[i];
			arr[i] = arr[pIndex];
			arr[pIndex] = temp;
			pIndex++;
		}
	}
	
	int temp = arr[r];
	arr[r] = arr[pIndex];
	arr[pIndex] = temp;
	
	return pIndex;
}

void quickSort(int arr[] , int l , int r)
{
	if(l<r)
	{
		int p = partition(arr,l,r);
		quickSort(arr,l,p-1);
		quickSort(arr,p+1,r);
	}
}


int main()
{
	int size;
	cout<<"\nEnter the size of the array :- ";
	cin>>size;
	
	int arr[size];
	cout<<"\nEnter the elements of array :- \n";
	for(int i=0;i<size;i++)
	{
		cin>>arr[i];
	}
	
	cout<<"\nElements of array before sorting are as follows :- \n";
	for(int i=0;i<size;i++)
	{
		cout<<arr[i]<<" ";
	}
	
	int l,r;
	l = 0;
	r = size;
	
	quickSort(arr,l,r-1);
	
	cout<<"\nElements of array after sorting are as follows :- \n";
	for(int i=0;i<size;i++)
	{
		cout<<arr[i]<<" ";
	}
	return 0;
}

/*
Output :-

Enter the size of the array :- 5

Enter the elements of array :-
3
6
5
2
7

Elements of array before sorting are as follows :-
3 6 5 2 7

Elements of array after sorting are as follows :-
2 3 5 6 7

--------------------------------
*/
